module FSM(
    input [2:0] OPCODE,
    input Clock,
    input Clear,
    output reg [3:0] Output
);

    reg [3:0] mux_out;
    wire [3:0] reg_out;
    wire [1:0] mux;

    FourBitRegister a(.in(mux_out), .enable(1'b1), .clear(Clear), .CLK(Clock), .Q(reg_out));
    assign mux[0] = (~reg_out[0] & ~reg_out[1] & reg_out[2] & ~reg_out[3]);
    assign mux[1] = (~reg_out[0] & ~reg_out[1] & ~reg_out[2] & reg_out[3]);

    always @(posedge Clock) begin
        if (Clear) begin
            mux_out <= 4'b0000;
        end else begin
            case (mux)
                2'b00: mux_out <= 4'b1000;
                2'b01: mux_out <= 4'b1001;
 		2'b10: mux_out <= {1'b0, OPCODE};
                default: mux_out <= 4'b1111;
            endcase
        end
    Output = mux_out;
    end
endmodule

